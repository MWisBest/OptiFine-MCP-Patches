diff -r -U 3 minecraft\net\optifine\entity\model\anim\ExpressionParser.java minecraft_patched\net\optifine\entity\model\anim\ExpressionParser.java
--- minecraft\net\optifine\entity\model\anim\ExpressionParser.java
+++ minecraft_patched\net\optifine\entity\model\anim\ExpressionParser.java
@@ -157,10 +157,10 @@
    }
 
    private EnumFunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException {
-      Token token = deque.peek();
-      if (token != null && token.getType() == EnumTokenType.BRACKET_OPEN) {
-         EnumFunctionType enumfunctiontype1 = EnumFunctionType.parse(token.getText());
-         checkNull(enumfunctiontype1, "Unknown function: " + token);
+      Token tokenn = deque.peek();
+      if (tokenn != null && tokenn.getType() == EnumTokenType.BRACKET_OPEN) {
+         EnumFunctionType enumfunctiontype1 = EnumFunctionType.parse(tokenn.getText());
+         checkNull(enumfunctiontype1, "Unknown function: " + tokenn);
          return enumfunctiontype1;
       } else {
          EnumFunctionType enumfunctiontype = EnumFunctionType.parse(token.getText());
@@ -179,8 +179,8 @@
          return makeFunction(type, new IExpression[0]);
       } else {
          Token token = deque.poll();
-         Deque<Token> deque = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
-         IExpression[] aiexpression = this.parseExpressions(deque);
+         Deque<Token> dequee = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
+         IExpression[] aiexpression = this.parseExpressions(dequee);
          return makeFunction(type, aiexpression);
       }
    }
@@ -189,8 +189,8 @@
       List<IExpression> list = new ArrayList<IExpression>();
 
       while(true) {
-         Deque<Token> deque = getGroup(deque, EnumTokenType.COMMA, false);
-         IExpression iexpression = this.parseInfix(deque);
+         Deque<Token> dequee = getGroup(deque, EnumTokenType.COMMA, false);
+         IExpression iexpression = this.parseInfix(dequee);
          if (iexpression == null) {
             IExpression[] aiexpression = (IExpression[])list.toArray(new IExpression[list.size()]);
             return aiexpression;
@@ -222,12 +222,12 @@
    }
 
    private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException {
-      Deque<Token> deque = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
-      return this.parseInfix(deque);
+      Deque<Token> dequee = getGroup(deque, EnumTokenType.BRACKET_CLOSE, true);
+      return this.parseInfix(dequee);
    }
 
    private static Deque<Token> getGroup(Deque<Token> deque, EnumTokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException {
-      Deque<Token> deque = new ArrayDeque<Token>();
+      Deque<Token> dequee = new ArrayDeque<Token>();
       int i = 0;
       Iterator iterator = deque.iterator();
 
@@ -235,10 +235,10 @@
          Token token = (Token)iterator.next();
          iterator.remove();
          if (i == 0 && token.getType() == tokenTypeEnd) {
-            return deque;
+            return dequee;
          }
 
-         deque.add(token);
+         dequee.add(token);
          if (token.getType() == EnumTokenType.BRACKET_OPEN) {
             ++i;
          }
@@ -251,7 +251,7 @@
       if (tokenEndRequired) {
          throw new ParseException("Missing end token: " + tokenTypeEnd);
       } else {
-         return deque;
+         return dequee;
       }
    }
 
